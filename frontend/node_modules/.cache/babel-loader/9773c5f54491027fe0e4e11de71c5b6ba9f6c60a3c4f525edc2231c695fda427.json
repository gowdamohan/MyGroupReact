{"ast":null,"code":"import _objectSpread from \"D:/MyGroupReact/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classPrivateMethodInitSpec from \"D:/MyGroupReact/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"D:/MyGroupReact/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _assertClassBrand from \"D:/MyGroupReact/frontend/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js\";\nimport _classPrivateFieldGet from \"D:/MyGroupReact/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"D:/MyGroupReact/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nvar _observers, _mutationCache, _retryer, _Class_brand;\n// src/mutation.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Removable } from \"./removable.js\";\nimport { createRetryer } from \"./retryer.js\";\nvar Mutation = (_observers = /*#__PURE__*/new WeakMap(), _mutationCache = /*#__PURE__*/new WeakMap(), _retryer = /*#__PURE__*/new WeakMap(), _Class_brand = /*#__PURE__*/new WeakSet(), class Mutation extends Removable {\n  constructor(config) {\n    super();\n    _classPrivateMethodInitSpec(this, _Class_brand);\n    _classPrivateFieldInitSpec(this, _observers, void 0);\n    _classPrivateFieldInitSpec(this, _mutationCache, void 0);\n    _classPrivateFieldInitSpec(this, _retryer, void 0);\n    this.mutationId = config.mutationId;\n    _classPrivateFieldSet(_mutationCache, this, config.mutationCache);\n    _classPrivateFieldSet(_observers, this, []);\n    this.state = config.state || getDefaultState();\n    this.setOptions(config.options);\n    this.scheduleGc();\n  }\n  setOptions(options) {\n    this.options = options;\n    this.updateGcTime(this.options.gcTime);\n  }\n  get meta() {\n    return this.options.meta;\n  }\n  addObserver(observer) {\n    if (!_classPrivateFieldGet(_observers, this).includes(observer)) {\n      _classPrivateFieldGet(_observers, this).push(observer);\n      this.clearGcTimeout();\n      _classPrivateFieldGet(_mutationCache, this).notify({\n        type: \"observerAdded\",\n        mutation: this,\n        observer\n      });\n    }\n  }\n  removeObserver(observer) {\n    _classPrivateFieldSet(_observers, this, _classPrivateFieldGet(_observers, this).filter(x => x !== observer));\n    this.scheduleGc();\n    _classPrivateFieldGet(_mutationCache, this).notify({\n      type: \"observerRemoved\",\n      mutation: this,\n      observer\n    });\n  }\n  optionalRemove() {\n    if (!_classPrivateFieldGet(_observers, this).length) {\n      if (this.state.status === \"pending\") {\n        this.scheduleGc();\n      } else {\n        _classPrivateFieldGet(_mutationCache, this).remove(this);\n      }\n    }\n  }\n  continue() {\n    var _classPrivateFieldGet2, _classPrivateFieldGet3;\n    return (_classPrivateFieldGet2 = (_classPrivateFieldGet3 = _classPrivateFieldGet(_retryer, this)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.continue()) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 :\n    // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n    this.execute(this.state.variables);\n  }\n  async execute(variables) {\n    var _this$options$retry;\n    const onContinue = () => {\n      _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n        type: \"continue\"\n      });\n    };\n    _classPrivateFieldSet(_retryer, this, createRetryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject(new Error(\"No mutationFn found\"));\n        }\n        return this.options.mutationFn(variables);\n      },\n      onFail: (failureCount, error) => {\n        _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n          type: \"failed\",\n          failureCount,\n          error\n        });\n      },\n      onPause: () => {\n        _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n          type: \"pause\"\n        });\n      },\n      onContinue,\n      retry: (_this$options$retry = this.options.retry) !== null && _this$options$retry !== void 0 ? _this$options$retry : 0,\n      retryDelay: this.options.retryDelay,\n      networkMode: this.options.networkMode,\n      canRun: () => _classPrivateFieldGet(_mutationCache, this).canRun(this)\n    }));\n    const restored = this.state.status === \"pending\";\n    const isPaused = !_classPrivateFieldGet(_retryer, this).canStart();\n    try {\n      var _classPrivateFieldGet6, _classPrivateFieldGet7, _this$options$onSucce, _this$options2, _classPrivateFieldGet8, _classPrivateFieldGet9, _this$options$onSettl, _this$options3;\n      if (restored) {\n        onContinue();\n      } else {\n        var _classPrivateFieldGet4, _classPrivateFieldGet5, _this$options$onMutat, _this$options;\n        _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n          type: \"pending\",\n          variables,\n          isPaused\n        });\n        await ((_classPrivateFieldGet4 = (_classPrivateFieldGet5 = _classPrivateFieldGet(_mutationCache, this).config).onMutate) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.call(_classPrivateFieldGet5, variables, this));\n        const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) === null || _this$options$onMutat === void 0 ? void 0 : _this$options$onMutat.call(_this$options, variables));\n        if (context !== this.state.context) {\n          _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n            type: \"pending\",\n            context,\n            variables,\n            isPaused\n          });\n        }\n      }\n      const data = await _classPrivateFieldGet(_retryer, this).start();\n      await ((_classPrivateFieldGet6 = (_classPrivateFieldGet7 = _classPrivateFieldGet(_mutationCache, this).config).onSuccess) === null || _classPrivateFieldGet6 === void 0 ? void 0 : _classPrivateFieldGet6.call(_classPrivateFieldGet7, data, variables, this.state.context, this));\n      await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) === null || _this$options$onSucce === void 0 ? void 0 : _this$options$onSucce.call(_this$options2, data, variables, this.state.context));\n      await ((_classPrivateFieldGet8 = (_classPrivateFieldGet9 = _classPrivateFieldGet(_mutationCache, this).config).onSettled) === null || _classPrivateFieldGet8 === void 0 ? void 0 : _classPrivateFieldGet8.call(_classPrivateFieldGet9, data, null, this.state.variables, this.state.context, this));\n      await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) === null || _this$options$onSettl === void 0 ? void 0 : _this$options$onSettl.call(_this$options3, data, null, variables, this.state.context));\n      _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n        type: \"success\",\n        data\n      });\n      return data;\n    } catch (error) {\n      try {\n        var _classPrivateFieldGet0, _classPrivateFieldGet1, _this$options$onError, _this$options4, _classPrivateFieldGet10, _classPrivateFieldGet11, _this$options$onSettl2, _this$options5;\n        await ((_classPrivateFieldGet0 = (_classPrivateFieldGet1 = _classPrivateFieldGet(_mutationCache, this).config).onError) === null || _classPrivateFieldGet0 === void 0 ? void 0 : _classPrivateFieldGet0.call(_classPrivateFieldGet1, error, variables, this.state.context, this));\n        await ((_this$options$onError = (_this$options4 = this.options).onError) === null || _this$options$onError === void 0 ? void 0 : _this$options$onError.call(_this$options4, error, variables, this.state.context));\n        await ((_classPrivateFieldGet10 = (_classPrivateFieldGet11 = _classPrivateFieldGet(_mutationCache, this).config).onSettled) === null || _classPrivateFieldGet10 === void 0 ? void 0 : _classPrivateFieldGet10.call(_classPrivateFieldGet11, void 0, error, this.state.variables, this.state.context, this));\n        await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) === null || _this$options$onSettl2 === void 0 ? void 0 : _this$options$onSettl2.call(_this$options5, void 0, error, variables, this.state.context));\n        throw error;\n      } finally {\n        _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n          type: \"error\",\n          error\n        });\n      }\n    } finally {\n      _classPrivateFieldGet(_mutationCache, this).runNext(this);\n    }\n  }\n});\nfunction _dispatch(action) {\n  const reducer = state => {\n    switch (action.type) {\n      case \"failed\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          failureCount: action.failureCount,\n          failureReason: action.error\n        });\n      case \"pause\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isPaused: true\n        });\n      case \"continue\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isPaused: false\n        });\n      case \"pending\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          context: action.context,\n          data: void 0,\n          failureCount: 0,\n          failureReason: null,\n          error: null,\n          isPaused: action.isPaused,\n          status: \"pending\",\n          variables: action.variables,\n          submittedAt: Date.now()\n        });\n      case \"success\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: action.data,\n          failureCount: 0,\n          failureReason: null,\n          error: null,\n          status: \"success\",\n          isPaused: false\n        });\n      case \"error\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: void 0,\n          error: action.error,\n          failureCount: state.failureCount + 1,\n          failureReason: action.error,\n          isPaused: false,\n          status: \"error\"\n        });\n    }\n  };\n  this.state = reducer(this.state);\n  notifyManager.batch(() => {\n    _classPrivateFieldGet(_observers, this).forEach(observer => {\n      observer.onMutationUpdate(action);\n    });\n    _classPrivateFieldGet(_mutationCache, this).notify({\n      mutation: this,\n      type: \"updated\",\n      action\n    });\n  });\n}\nfunction getDefaultState() {\n  return {\n    context: void 0,\n    data: void 0,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: \"idle\",\n    variables: void 0,\n    submittedAt: 0\n  };\n}\nexport { Mutation, getDefaultState };\n//# sourceMappingURL=mutation.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}