{"ast":null,"code":"import _classPrivateMethodInitSpec from \"D:/MyGroupReact/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"D:/MyGroupReact/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _assertClassBrand from \"D:/MyGroupReact/frontend/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js\";\nimport _classPrivateFieldGet from \"D:/MyGroupReact/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"D:/MyGroupReact/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nvar _client, _result, _queries, _options, _observers, _combinedResult, _lastCombine, _lastResult, _observerMatches, _Class_brand;\n// src/queriesObserver.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { QueryObserver } from \"./queryObserver.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { replaceEqualDeep } from \"./utils.js\";\nfunction difference(array1, array2) {\n  const excludeSet = new Set(array2);\n  return array1.filter(x => !excludeSet.has(x));\n}\nfunction replaceAt(array, index, value) {\n  const copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nvar QueriesObserver = (_client = /*#__PURE__*/new WeakMap(), _result = /*#__PURE__*/new WeakMap(), _queries = /*#__PURE__*/new WeakMap(), _options = /*#__PURE__*/new WeakMap(), _observers = /*#__PURE__*/new WeakMap(), _combinedResult = /*#__PURE__*/new WeakMap(), _lastCombine = /*#__PURE__*/new WeakMap(), _lastResult = /*#__PURE__*/new WeakMap(), _observerMatches = /*#__PURE__*/new WeakMap(), _Class_brand = /*#__PURE__*/new WeakSet(), class QueriesObserver extends Subscribable {\n  constructor(client, _queries2, _options2) {\n    super();\n    _classPrivateMethodInitSpec(this, _Class_brand);\n    _classPrivateFieldInitSpec(this, _client, void 0);\n    _classPrivateFieldInitSpec(this, _result, void 0);\n    _classPrivateFieldInitSpec(this, _queries, void 0);\n    _classPrivateFieldInitSpec(this, _options, void 0);\n    _classPrivateFieldInitSpec(this, _observers, void 0);\n    _classPrivateFieldInitSpec(this, _combinedResult, void 0);\n    _classPrivateFieldInitSpec(this, _lastCombine, void 0);\n    _classPrivateFieldInitSpec(this, _lastResult, void 0);\n    _classPrivateFieldInitSpec(this, _observerMatches, []);\n    _classPrivateFieldSet(_client, this, client);\n    _classPrivateFieldSet(_options, this, _options2);\n    _classPrivateFieldSet(_queries, this, []);\n    _classPrivateFieldSet(_observers, this, []);\n    _classPrivateFieldSet(_result, this, []);\n    this.setQueries(_queries2);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      _classPrivateFieldGet(_observers, this).forEach(observer => {\n        observer.subscribe(result => {\n          _assertClassBrand(_Class_brand, this, _onUpdate).call(this, observer, result);\n        });\n      });\n    }\n  }\n  onUnsubscribe() {\n    if (!this.listeners.size) {\n      this.destroy();\n    }\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */new Set();\n    _classPrivateFieldGet(_observers, this).forEach(observer => {\n      observer.destroy();\n    });\n  }\n  setQueries(queries, options) {\n    _classPrivateFieldSet(_queries, this, queries);\n    _classPrivateFieldSet(_options, this, options);\n    if (process.env.NODE_ENV !== \"production\") {\n      const queryHashes = queries.map(query => _classPrivateFieldGet(_client, this).defaultQueryOptions(query).queryHash);\n      if (new Set(queryHashes).size !== queryHashes.length) {\n        console.warn(\"[QueriesObserver]: Duplicate Queries found. This might result in unexpected behavior.\");\n      }\n    }\n    notifyManager.batch(() => {\n      const prevObservers = _classPrivateFieldGet(_observers, this);\n      const newObserverMatches = _assertClassBrand(_Class_brand, this, _findMatchingObservers).call(this, _classPrivateFieldGet(_queries, this));\n      _classPrivateFieldSet(_observerMatches, this, newObserverMatches);\n      newObserverMatches.forEach(match => match.observer.setOptions(match.defaultedQueryOptions));\n      const newObservers = newObserverMatches.map(match => match.observer);\n      const newResult = newObservers.map(observer => observer.getCurrentResult());\n      const hasIndexChange = newObservers.some((observer, index) => observer !== prevObservers[index]);\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n      _classPrivateFieldSet(_observers, this, newObservers);\n      _classPrivateFieldSet(_result, this, newResult);\n      if (!this.hasListeners()) {\n        return;\n      }\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          _assertClassBrand(_Class_brand, this, _onUpdate).call(this, observer, result);\n        });\n      });\n      _assertClassBrand(_Class_brand, this, _notify).call(this);\n    });\n  }\n  getCurrentResult() {\n    return _classPrivateFieldGet(_result, this);\n  }\n  getQueries() {\n    return _classPrivateFieldGet(_observers, this).map(observer => observer.getCurrentQuery());\n  }\n  getObservers() {\n    return _classPrivateFieldGet(_observers, this);\n  }\n  getOptimisticResult(queries, combine) {\n    const matches = _assertClassBrand(_Class_brand, this, _findMatchingObservers).call(this, queries);\n    const result = matches.map(match => match.observer.getOptimisticResult(match.defaultedQueryOptions));\n    return [result, r => {\n      return _assertClassBrand(_Class_brand, this, _combineResult).call(this, r !== null && r !== void 0 ? r : result, combine);\n    }, () => {\n      return _assertClassBrand(_Class_brand, this, _trackResult).call(this, result, matches);\n    }];\n  }\n});\nfunction _trackResult(result, matches) {\n  return matches.map((match, index) => {\n    const observerResult = result[index];\n    return !match.defaultedQueryOptions.notifyOnChangeProps ? match.observer.trackResult(observerResult, accessedProp => {\n      matches.forEach(m => {\n        m.observer.trackProp(accessedProp);\n      });\n    }) : observerResult;\n  });\n}\nfunction _combineResult(input, combine) {\n  if (combine) {\n    if (!_classPrivateFieldGet(_combinedResult, this) || _classPrivateFieldGet(_result, this) !== _classPrivateFieldGet(_lastResult, this) || combine !== _classPrivateFieldGet(_lastCombine, this)) {\n      _classPrivateFieldSet(_lastCombine, this, combine);\n      _classPrivateFieldSet(_lastResult, this, _classPrivateFieldGet(_result, this));\n      _classPrivateFieldSet(_combinedResult, this, replaceEqualDeep(_classPrivateFieldGet(_combinedResult, this), combine(input)));\n    }\n    return _classPrivateFieldGet(_combinedResult, this);\n  }\n  return input;\n}\nfunction _findMatchingObservers(queries) {\n  const prevObserversMap = new Map(_classPrivateFieldGet(_observers, this).map(observer => [observer.options.queryHash, observer]));\n  const observers = [];\n  queries.forEach(options => {\n    const defaultedOptions = _classPrivateFieldGet(_client, this).defaultQueryOptions(options);\n    const match = prevObserversMap.get(defaultedOptions.queryHash);\n    if (match) {\n      observers.push({\n        defaultedQueryOptions: defaultedOptions,\n        observer: match\n      });\n    } else {\n      observers.push({\n        defaultedQueryOptions: defaultedOptions,\n        observer: new QueryObserver(_classPrivateFieldGet(_client, this), defaultedOptions)\n      });\n    }\n  });\n  return observers;\n}\nfunction _onUpdate(observer, result) {\n  const index = _classPrivateFieldGet(_observers, this).indexOf(observer);\n  if (index !== -1) {\n    _classPrivateFieldSet(_result, this, replaceAt(_classPrivateFieldGet(_result, this), index, result));\n    _assertClassBrand(_Class_brand, this, _notify).call(this);\n  }\n}\nfunction _notify() {\n  if (this.hasListeners()) {\n    var _classPrivateFieldGet2;\n    const previousResult = _classPrivateFieldGet(_combinedResult, this);\n    const newTracked = _assertClassBrand(_Class_brand, this, _trackResult).call(this, _classPrivateFieldGet(_result, this), _classPrivateFieldGet(_observerMatches, this));\n    const newResult = _assertClassBrand(_Class_brand, this, _combineResult).call(this, newTracked, (_classPrivateFieldGet2 = _classPrivateFieldGet(_options, this)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.combine);\n    if (previousResult !== newResult) {\n      notifyManager.batch(() => {\n        this.listeners.forEach(listener => {\n          listener(_classPrivateFieldGet(_result, this));\n        });\n      });\n    }\n  }\n}\nexport { QueriesObserver };\n//# sourceMappingURL=queriesObserver.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}