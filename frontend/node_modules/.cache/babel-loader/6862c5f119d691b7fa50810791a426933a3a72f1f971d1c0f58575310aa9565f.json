{"ast":null,"code":"\"use client\";\n\n// src/useMutationState.ts\nimport _objectSpread from \"D:/MyGroupReact/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport * as React from \"react\";\nimport { notifyManager, replaceEqualDeep } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nfunction useIsMutating(filters, queryClient) {\n  const client = useQueryClient(queryClient);\n  return useMutationState({\n    filters: _objectSpread(_objectSpread({}, filters), {}, {\n      status: \"pending\"\n    })\n  }, client).length;\n}\nfunction getResult(mutationCache, options) {\n  return mutationCache.findAll(options.filters).map(mutation => options.select ? options.select(mutation) : mutation.state);\n}\nfunction useMutationState() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let queryClient = arguments.length > 1 ? arguments[1] : undefined;\n  const mutationCache = useQueryClient(queryClient).getMutationCache();\n  const optionsRef = React.useRef(options);\n  const result = React.useRef(null);\n  if (!result.current) {\n    result.current = getResult(mutationCache, options);\n  }\n  React.useEffect(() => {\n    optionsRef.current = options;\n  });\n  return React.useSyncExternalStore(React.useCallback(onStoreChange => mutationCache.subscribe(() => {\n    const nextResult = replaceEqualDeep(result.current, getResult(mutationCache, optionsRef.current));\n    if (result.current !== nextResult) {\n      result.current = nextResult;\n      notifyManager.schedule(onStoreChange);\n    }\n  }), [mutationCache]), () => result.current, () => result.current);\n}\nexport { useIsMutating, useMutationState };\n//# sourceMappingURL=useMutationState.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}