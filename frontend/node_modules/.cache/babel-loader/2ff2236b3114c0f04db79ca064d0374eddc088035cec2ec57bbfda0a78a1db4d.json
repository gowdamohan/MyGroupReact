{"ast":null,"code":"import _classPrivateFieldInitSpec from \"D:/MyGroupReact/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"D:/MyGroupReact/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"D:/MyGroupReact/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nvar _focused, _cleanup, _setup;\n// src/focusManager.ts\nimport { Subscribable } from \"./subscribable.js\";\nimport { isServer } from \"./utils.js\";\nvar FocusManager = (_focused = /*#__PURE__*/new WeakMap(), _cleanup = /*#__PURE__*/new WeakMap(), _setup = /*#__PURE__*/new WeakMap(), class FocusManager extends Subscribable {\n  constructor() {\n    super();\n    _classPrivateFieldInitSpec(this, _focused, void 0);\n    _classPrivateFieldInitSpec(this, _cleanup, void 0);\n    _classPrivateFieldInitSpec(this, _setup, void 0);\n    _classPrivateFieldSet(_setup, this, onFocus => {\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus();\n        window.addEventListener(\"visibilitychange\", listener, false);\n        return () => {\n          window.removeEventListener(\"visibilitychange\", listener);\n        };\n      }\n      return;\n    });\n  }\n  onSubscribe() {\n    if (!_classPrivateFieldGet(_cleanup, this)) {\n      this.setEventListener(_classPrivateFieldGet(_setup, this));\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _classPrivateFieldGet2;\n      (_classPrivateFieldGet2 = _classPrivateFieldGet(_cleanup, this)) === null || _classPrivateFieldGet2 === void 0 || _classPrivateFieldGet2.call(this);\n      _classPrivateFieldSet(_cleanup, this, void 0);\n    }\n  }\n  setEventListener(setup) {\n    var _classPrivateFieldGet3;\n    _classPrivateFieldSet(_setup, this, setup);\n    (_classPrivateFieldGet3 = _classPrivateFieldGet(_cleanup, this)) === null || _classPrivateFieldGet3 === void 0 || _classPrivateFieldGet3.call(this);\n    _classPrivateFieldSet(_cleanup, this, setup(focused => {\n      if (typeof focused === \"boolean\") {\n        this.setFocused(focused);\n      } else {\n        this.onFocus();\n      }\n    }));\n  }\n  setFocused(focused) {\n    const changed = _classPrivateFieldGet(_focused, this) !== focused;\n    if (changed) {\n      _classPrivateFieldSet(_focused, this, focused);\n      this.onFocus();\n    }\n  }\n  onFocus() {\n    const isFocused = this.isFocused();\n    this.listeners.forEach(listener => {\n      listener(isFocused);\n    });\n  }\n  isFocused() {\n    var _globalThis$document;\n    if (typeof _classPrivateFieldGet(_focused, this) === \"boolean\") {\n      return _classPrivateFieldGet(_focused, this);\n    }\n    return ((_globalThis$document = globalThis.document) === null || _globalThis$document === void 0 ? void 0 : _globalThis$document.visibilityState) !== \"hidden\";\n  }\n});\nvar focusManager = new FocusManager();\nexport { FocusManager, focusManager };\n//# sourceMappingURL=focusManager.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}