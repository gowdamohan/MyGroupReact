{"ast":null,"code":"import _classPrivateFieldInitSpec from \"D:/MyGroupReact/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"D:/MyGroupReact/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"D:/MyGroupReact/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nvar _online, _cleanup, _setup;\n// src/onlineManager.ts\nimport { Subscribable } from \"./subscribable.js\";\nimport { isServer } from \"./utils.js\";\nvar OnlineManager = (_online = /*#__PURE__*/new WeakMap(), _cleanup = /*#__PURE__*/new WeakMap(), _setup = /*#__PURE__*/new WeakMap(), class OnlineManager extends Subscribable {\n  constructor() {\n    super();\n    _classPrivateFieldInitSpec(this, _online, true);\n    _classPrivateFieldInitSpec(this, _cleanup, void 0);\n    _classPrivateFieldInitSpec(this, _setup, void 0);\n    _classPrivateFieldSet(_setup, this, onOnline => {\n      if (!isServer && window.addEventListener) {\n        const onlineListener = () => onOnline(true);\n        const offlineListener = () => onOnline(false);\n        window.addEventListener(\"online\", onlineListener, false);\n        window.addEventListener(\"offline\", offlineListener, false);\n        return () => {\n          window.removeEventListener(\"online\", onlineListener);\n          window.removeEventListener(\"offline\", offlineListener);\n        };\n      }\n      return;\n    });\n  }\n  onSubscribe() {\n    if (!_classPrivateFieldGet(_cleanup, this)) {\n      this.setEventListener(_classPrivateFieldGet(_setup, this));\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _classPrivateFieldGet2;\n      (_classPrivateFieldGet2 = _classPrivateFieldGet(_cleanup, this)) === null || _classPrivateFieldGet2 === void 0 || _classPrivateFieldGet2.call(this);\n      _classPrivateFieldSet(_cleanup, this, void 0);\n    }\n  }\n  setEventListener(setup) {\n    var _classPrivateFieldGet3;\n    _classPrivateFieldSet(_setup, this, setup);\n    (_classPrivateFieldGet3 = _classPrivateFieldGet(_cleanup, this)) === null || _classPrivateFieldGet3 === void 0 || _classPrivateFieldGet3.call(this);\n    _classPrivateFieldSet(_cleanup, this, setup(this.setOnline.bind(this)));\n  }\n  setOnline(online) {\n    const changed = _classPrivateFieldGet(_online, this) !== online;\n    if (changed) {\n      _classPrivateFieldSet(_online, this, online);\n      this.listeners.forEach(listener => {\n        listener(online);\n      });\n    }\n  }\n  isOnline() {\n    return _classPrivateFieldGet(_online, this);\n  }\n});\nvar onlineManager = new OnlineManager();\nexport { OnlineManager, onlineManager };\n//# sourceMappingURL=onlineManager.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}